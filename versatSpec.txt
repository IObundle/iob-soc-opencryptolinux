
module sigma(x){
   Const const1;
   Const const2;
   Const const3;
#
   res = (x >>< const1) ^ (x >>< const2) ^ (x >> const3);
   res -> out;
}

module Sigma(x){
   Const const1;
   Const const2;
   Const const3;
#
   res = (x >>< const1) ^ (x >>< const2) ^ (x >>< const3);
   res -> out;
}

module CH(a,b,c){
#
   res = (a & b) ^ (~a & c);
   res -> out;
}

module CHImpl(){
   Const a;
   Const b;
   Const c;
   CH ch;
   Reg output;
#
   a -> ch:0;
   b -> ch:1;
   c -> ch:2;

   ch -> output;
}

module Maj(x,y,z){
#
   res = (x & y) ^ (x & z) ^ (y & z);
   res -> out;
}

module sigma_stage(x,y){
   sigma sigma0;
   sigma sigma1;
#
   x -> sigma0;
   y -> sigma1;

   sigma0 -> out:0;
   sigma1 -> out:1;
}

module Comb_M_Stage(w0,w14,w9,w1){
   static sigma_stage sigma;
#
   w1 -> sigma:0;
   w14 -> sigma:1;
  
   res = sigma:0 + w0 + sigma:1 + w9;
   res -> out;
}

module M_Stage(w0,w14,w9,w1){
   Comb_M_Stage comb;
   PipelineRegister r;
#
   w0 -> comb:0;
   w14 -> comb:1;
   w9 -> comb:2;
   w1 -> comb:3;

   comb -> r;

   r -> out;
}

module M(w){
   M_Stage m0;
   M_Stage m1;
   M_Stage m2;
   M_Stage m3;
   M_Stage m4;
   M_Stage m5;
   M_Stage m6;
   M_Stage m7;
   M_Stage m8;
   M_Stage m9;
   M_Stage ma;
   M_Stage mb;
   M_Stage mc;
   M_Stage md;
   M_Stage me;
   M_Stage mf;
   Merge merge;
#
   w[0] -> m0:0;
   w[14] -> m0:1;
   w[9] -> m0:2;
   w[1] -> m0:3;

   w[1] -> m1:0;
   w[15] -> m1:1;
   w[10] -> m1:2;
   w[2] -> m1:3;
   
   w[2] -> m2:0;
   m0 -> m2:1;
   w[11] -> m2:2;
   w[3] -> m2:3;
   
   w[3] -> m3:0;
   m1 -> m3:1;
   w[12] -> m3:2;
   w[4] -> m3:3;
   
   w[4] -> m4:0;
   m2 -> m4:1;
   w[13] -> m4:2;
   w[5] -> m4:3;
   
   w[5] -> m5:0;
   m3 -> m5:1;
   w[14] -> m5:2;
   w[6] -> m5:3;
   
   w[6] -> m6:0;
   m4 -> m6:1;
   w[15] -> m6:2;
   w[7] -> m6:3;
   
   w[7] -> m7:0;
   m5 -> m7:1;
   m0 -> m7:2;
   w[8] -> m7:3;
   
   w[8] -> m8:0;
   m6 -> m8:1;
   m1 -> m8:2;
   w[9] -> m8:3;
   
   w[9] -> m9:0;
   m7 -> m9:1;
   m2 -> m9:2;
   w[10] -> m9:3;
   
   w[10] -> ma:0;
   m8 -> ma:1;
   m3 -> ma:2;
   w[11] -> ma:3;
   
   w[11] -> mb:0;
   m9 -> mb:1;
   m4 -> mb:2;
   w[12] -> mb:3;
   
   w[12] -> mc:0;
   ma -> mc:1;
   m5 -> mc:2;
   w[13] -> mc:3;
   
   w[13] -> md:0;
   mb -> md:1;
   m6 -> md:2;
   w[14] -> md:3;
   
   w[14] -> me:0;
   mc -> me:1;
   m7 -> me:2;
   w[15] -> me:3;
   
   w[15] -> mf:0;
   md -> mf:1;
   m8 -> mf:2;
   m0 -> mf:3;

   m0 -> merge:0;
   m1 -> merge:1;
   m2 -> merge:2;
   m3 -> merge:3;
   m4 -> merge:4;
   m5 -> merge:5;
   m6 -> merge:6;
   m7 -> merge:7;
   m8 -> merge:8;
   m9 -> merge:9;
   ma -> merge:10;
   mb -> merge:11;
   mc -> merge:12;
   md -> merge:13;
   me -> merge:14;
   mf -> merge:15;

   merge -> out;
}

module T1(e,f,g,h,k,w){
   CH ch;
   Sigma s;
#   
   e -> s;

   e -> ch:0;
   f -> ch:1;
   g -> ch:2;

   a1 = h + s:0;
   a2 = ch + k;
   a3 = a1 + a2;
   
   b1 = a3 + w;

   b1 -> out;
}

module T2(a,b,c){
   Sigma s;
   Maj m;
#
   a -> s;

   a -> m:0;
   b -> m:1;
   c -> m:2;

   d = s + m;

   d -> out; 
}

module T_Stage(a,b,c,e,f,g,h,k,w){
   T1 t1;
   T2 t2;
#
   a -> t2:0;
   b -> t2:1;
   c -> t2:2;

   e -> t1:0;
   f -> t1:1;
   g -> t1:2;
   h -> t1:3;
   k -> t1:4;
   w -> t1:5;

   t1 -> out:0;
   t2 -> out:1;
}

module Comb_F_Stage(a,b,c,d,e,f,g,h,k,w){
   static T_Stage t;
#
   a -> t:0;
   b -> t:1;
   c -> t:2;

   e -> t:3;
   f -> t:4;
   g -> t:5;
   h -> t:6;
   k -> t:7;
   w -> t:8;

   a1 = t:0 + t:1;
   a2 = d + t:0;

   a1 -> out:0;
   a  -> out:1;
   b  -> out:2;
   c  -> out:3;
   a2 -> out:4;
   e  -> out:5;
   f  -> out:6;
   g  -> out:7;
}

module F_Stage(a,b,c,d,e,f,g,h,k,w){
   Comb_F_Stage f_stage;
   PipelineRegister d0;
   PipelineRegister d1;
   PipelineRegister d2;
   PipelineRegister d3;
   PipelineRegister d4;
   PipelineRegister d5;
   PipelineRegister d6;
   PipelineRegister d7;
#
   a -> f_stage:0;
   b -> f_stage:1;
   c -> f_stage:2;
   d -> f_stage:3;
   e -> f_stage:4;
   f -> f_stage:5;
   g -> f_stage:6;
   h -> f_stage:7;
   k -> f_stage:8;
   w -> f_stage:9;

   f_stage:0 -> d0; // a
   f_stage:1 -> d1; // b
   f_stage:2 -> d2; // c
   f_stage:3 -> d3; // d
   f_stage:4 -> d4; // e
   f_stage:5 -> d5; // f
   f_stage:6 -> d6; // g
   f_stage:7 -> d7; // h

   d0 -> out:0;
   d1 -> out:1;
   d2 -> out:2;
   d3 -> out:3;
   d4 -> out:4;
   d5 -> out:5;
   d6 -> out:6;
   d7 -> out:7;
}

module F(a,b,c,d,e,f,g,h,k,w){
   F_Stage f0;
   F_Stage f1;
   F_Stage f2;
   F_Stage f3;
   F_Stage f4;
   F_Stage f5;
   F_Stage f6;
   F_Stage f7;
   F_Stage f8;
   F_Stage f9;
   F_Stage fa;
   F_Stage fb;
   F_Stage fc;
   F_Stage fd;
   F_Stage fe;
   F_Stage ff;
#
   a ->  f0:0;
   b ->  f0:1;
   c ->  f0:2;
   d ->  f0:3;
   e ->  f0:4;
   f ->  f0:5;
   g ->  f0:6;
   h ->  f0:7;
   k[0] -> f0:8;
   w[0] -> f0:9;

   f0:0..7 -> f1:0..7;
   k[1] -> f1:8;
   w[1] -> f1:9;

   f1:0..7 -> f2:0..7;
   k[2] -> f2:8;
   w[2] -> f2:9;

   f2:0..7 -> f3:0..7;
   k[3] -> f3:8;
   w[3] -> f3:9;

   f3:0..7 -> f4:0..7;
   k[4] -> f4:8;
   w[4] -> f4:9;

   f4:0..7 -> f5:0..7;
   k[5] -> f5:8;
   w[5] -> f5:9;

   f5:0..7 -> f6:0..7;
   k[6] -> f6:8;
   w[6] -> f6:9;

   f6:0..7 -> f7:0..7;
   k[7] -> f7:8;
   w[7] -> f7:9;

   f7:0..7 -> f8:0..7;
   k[8] -> f8:8;
   w[8] -> f8:9;

   f8:0..7 -> f9:0..7;
   k[9] -> f9:8;
   w[9] -> f9:9;

   f9:0..7 -> fa:0..7;
   k[10] -> fa:8;
   w[10] -> fa:9;

   fa:0..7 -> fb:0..7;
   k[11] -> fb:8;
   w[11] -> fb:9;

   fb:0..7 -> fc:0..7;
   k[12] -> fc:8;
   w[12] -> fc:9;

   fc:0..7 -> fd:0..7;
   k[13] -> fd:8;
   w[13] -> fd:9;

   fd:0..7 -> fe:0..7;
   k[14] -> fe:8;
   w[14] -> fe:9;

   fe:0..7 -> ff:0..7;
   k[15] -> ff:8;
   w[15] -> ff:9;

   ff:0..7 -> out:0..7;
}

module ShaSingleState(in){
   Reg reg;
#
   a = reg + in;
   a -> reg;
   reg -> out;
}

// Simple grouping of state so it appears better on the graphs
module ShaState(x0,x1,x2,x3,x4,x5,x6,x7){
   ShaSingleState s0;
   ShaSingleState s1;
   ShaSingleState s2;
   ShaSingleState s3;
   ShaSingleState s4;
   ShaSingleState s5;
   ShaSingleState s6;
   ShaSingleState s7;
#
   x0 -> s0;
   x1 -> s1;
   x2 -> s2;
   x3 -> s3;
   x4 -> s4;
   x5 -> s5;
   x6 -> s6;
   x7 -> s7;

   s0 -> out:0;
   s1 -> out:1;
   s2 -> out:2;
   s3 -> out:3;
   s4 -> out:4;
   s5 -> out:5;
   s6 -> out:6;
   s7 -> out:7;
}

module Constants(){
   static Mem mem;
#
   mem -> out:0;
}

module SHA(){
   VRead MemRead;
   SwapEndian Swap;
   xunitF F0;
   xunitF F1;
   xunitF F2;
   xunitF F3;
   xunitM M0;
   xunitM M1;
   xunitM M2;
   Constants cMem0;
   Constants cMem1;
   Constants cMem2;
   Constants cMem3;
   ShaState State;
#
   MemRead -> Swap;
   
   {State:0..7,cMem0,Swap} -> F0:0..9;
   {F0:0..7   ,cMem1,M0} -> F1:0..9;
   {F1:0..7   ,cMem2,M1} -> F2:0..9;
   {F2:0..7   ,cMem3,M2} -> F3:0..9;

   Swap -> M0;
   M0 -> M1;
   M1 -> M2;
   
   F3:0..7 -> State:0..7;
}

module SBox(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s1;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s2;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s3;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s4;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s5;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s6;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) s7;
#
   x0 -> s0:0;
   x1 -> s0:1;

   x2 -> s1:0;
   x3 -> s1:1;

   x4 -> s2:0;
   x5 -> s2:1;

   x6 -> s3:0;
   x7 -> s3:1;

   x8 -> s4:0;
   x9 -> s4:1;

   xa -> s5:0;
   xb -> s5:1;

   xc -> s6:0;
   xd -> s6:1;

   xe -> s7:0;
   xf -> s7:1;

   s0:0 -> out:0;
   s0:1 -> out:1;
   s1:0 -> out:2;
   s1:1 -> out:3;
   s2:0 -> out:4;
   s2:1 -> out:5;
   s3:0 -> out:6;
   s3:1 -> out:7;
   s4:0 -> out:8;
   s4:1 -> out:9;
   s5:0 -> out:10;
   s5:1 -> out:11;
   s6:0 -> out:12;
   s6:1 -> out:13;
   s7:0 -> out:14;
   s7:1 -> out:15;
}

module ShiftRows(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   #
   // First row
   x0 -> out:0;
   x1 -> out:1;
   x2 -> out:2;
   x3 -> out:3;

   // Second row
   x4 -> out:7;
   x5 -> out:4;
   x6 -> out:5;
   x7 -> out:6;

   // Third row
   x8 -> out:10;
   x9 -> out:11;
   xa -> out:8;
   xb -> out:9;

   // Fourth row
   xc -> out:13;
   xd -> out:14;
   xe -> out:15;
   xf -> out:12;
}

module MixProduct(mul2,mul3,x11,x12){
#
   res = mul2 ^ mul3 ^ x11 ^ x12;
   res -> out;
}

module DoRow(x0,x1,x2,x3){
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) mul2_0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) mul2_1;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) mul3_0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) mul3_1;
   MixProduct m0;
   MixProduct m1;
   MixProduct m2;
   MixProduct m3;
#
   x0 -> mul2_0:0;
   x1 -> mul2_0:1;
   x2 -> mul2_1:0;
   x3 -> mul2_1:1;

   x0 -> mul3_0:0;
   x1 -> mul3_0:1;
   x2 -> mul3_1:0;
   x3 -> mul3_1:1;

   mul2_0:0 -> m0:0; // mul2[x0]
   mul3_0:1 -> m0:1; // mul3[x1]
   x2 -> m0:2;
   x3 -> m0:3;

   x0 -> m1:0;
   mul2_0:1 -> m1:1; // mul2[x1]
   mul3_1:0 -> m1:2; // mul3[x2]
   x3 -> m1:3;

   x0 -> m2:0;
   x1 -> m2:1;
   mul2_1:0 -> m2:2; // mul2[x2]
   mul3_1:1 -> m2:3; // mul3[x3]

   mul3_0:0 -> m3:0; // mul3[x0]
   x1 -> m3:1;
   x2 -> m3:2;
   mul2_1:1 -> m3:3; // mul2[x3]

   m0 -> out:0;
   m1 -> out:1;
   m2 -> out:2;
   m3 -> out:3;
}

module MixColumns(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf){
   DoRow d0;
   DoRow d1;
   DoRow d2;
   DoRow d3;
#
   x0 -> d0:0;
   x4 -> d0:1;
   x8 -> d0:2;
   xc -> d0:3;

   x1 -> d1:0;
   x5 -> d1:1;
   x9 -> d1:2;
   xd -> d1:3;

   x2 -> d2:0;
   x6 -> d2:1;
   xa -> d2:2;
   xe -> d2:3;

   x3 -> d3:0;
   x7 -> d3:1;
   xb -> d3:2;
   xf -> d3:3;

   d0:0 -> out:0;
   d0:1 -> out:4;
   d0:2 -> out:8;
   d0:3 -> out:12;
   
   d1:0 -> out:1;
   d1:1 -> out:5;
   d1:2 -> out:9;
   d1:3 -> out:13;

   d2:0 -> out:2;
   d2:1 -> out:6;
   d2:2 -> out:10;
   d2:3 -> out:14;
   
   d3:0 -> out:3;
   d3:1 -> out:7;
   d3:2 -> out:11;
   d3:3 -> out:15;
}

module AddRoundKey(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,ya,yb,yc,yd,ye,yf){
#
   a0 = x0 ^ y0;
   a1 = x1 ^ y1;
   a2 = x2 ^ y2;
   a3 = x3 ^ y3;
   a4 = x4 ^ y4;
   a5 = x5 ^ y5;
   a6 = x6 ^ y6;
   a7 = x7 ^ y7;
   a8 = x8 ^ y8;
   a9 = x9 ^ y9;
   aa = xa ^ ya;
   ab = xb ^ yb;
   ac = xc ^ yc;
   ad = xd ^ yd;
   ae = xe ^ ye;
   af = xf ^ yf;

   a0 -> out:0;
   a1 -> out:1;
   a2 -> out:2;
   a3 -> out:3;
   a4 -> out:4;
   a5 -> out:5;
   a6 -> out:6;
   a7 -> out:7;
   a8 -> out:8;
   a9 -> out:9;
   aa -> out:10;
   ab -> out:11;
   ac -> out:12;
   ad -> out:13;
   ae -> out:14;
   af -> out:15;
}

module FirstLineKey(x0,x1,x2,x3,w0,w1,w2,w3,rcon){
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b1;
#
   x1 -> b0:0;
   x2 -> b0:1;
   x3 -> b1:0;
   x0 -> b1:1;

   d0 = b0:0 ^ w0 ^ rcon;
   d1 = b0:1 ^ w1;
   d2 = b1:0 ^ w2;
   d3 = b1:1 ^ w3;

   d0 -> out:0; 
   d1 -> out:1; 
   d2 -> out:2; 
   d3 -> out:3; 
}

module KeySchedule(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,rcon){
   FirstLineKey s;
#
   x3 -> s:0;
   x7 -> s:1;
   xb -> s:2;
   xf -> s:3;
   x0 -> s:4;
   x4 -> s:5;
   x8 -> s:6;
   xc -> s:7;
   rcon -> s:8;

   a0 = s:0 ^ x1;
   a1 = s:1 ^ x5;
   a2 = s:2 ^ x9;
   a3 = s:3 ^ xd;

   b0 = a0 ^ x2;
   b1 = a1 ^ x6;
   b2 = a2 ^ xa;
   b3 = a3 ^ xe;

   c0 = b0 ^ x3;
   c1 = b1 ^ x7;
   c2 = b2 ^ xb;
   c3 = b3 ^ xf;

   s:0 -> out:0;
   s:1 -> out:4;
   s:2 -> out:8;
   s:3 -> out:12;
   a0 -> out:1;
   a1 -> out:5;
   a2 -> out:9;
   a3 -> out:13;
   b0 -> out:2;
   b1 -> out:6;
   b2 -> out:10;
   b3 -> out:14;
   c0 -> out:3;
   c1 -> out:7;
   c2 -> out:11;
   c3 -> out:15;
}

module MainRound(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf){
   SBox subBytes;
   ShiftRows shiftRows;
   MixColumns mixColumns;
   AddRoundKey addRoundKey;
#
   x0 -> subBytes:0;
   x1 -> subBytes:1;
   x2 -> subBytes:2;
   x3 -> subBytes:3;
   x4 -> subBytes:4;
   x5 -> subBytes:5;
   x6 -> subBytes:6;
   x7 -> subBytes:7;
   x8 -> subBytes:8;
   x9 -> subBytes:9;
   xa -> subBytes:10;
   xb -> subBytes:11;
   xc -> subBytes:12;
   xd -> subBytes:13;
   xe -> subBytes:14;
   xf -> subBytes:15;
   
   subBytes:0..15 -> shiftRows:0..15;
   shiftRows:0..15 -> mixColumns:0..15;
   mixColumns:0..15 -> addRoundKey:0..15;

   k0 -> addRoundKey:16;
   k1 -> addRoundKey:17;
   k2 -> addRoundKey:18;
   k3 -> addRoundKey:19;
   k4 -> addRoundKey:20;
   k5 -> addRoundKey:21;
   k6 -> addRoundKey:22;
   k7 -> addRoundKey:23;
   k8 -> addRoundKey:24;
   k9 -> addRoundKey:25;
   ka -> addRoundKey:26;
   kb -> addRoundKey:27;
   kc -> addRoundKey:28;
   kd -> addRoundKey:29;
   ke -> addRoundKey:30;
   kf -> addRoundKey:31;

   addRoundKey:0..15 -> out:0..15;
}

module FloatTest(x,y){
   MyFloatAdd unit;   
#
   x -> unit:0;
   y -> unit:1;

   unit -> out;
}

iterative SimpleIterative(x){
   Mul mul; // The first unit is defined as the "core" unit of the iterative 
   Const const0;
   Const const1;
   Const const2;
   Const const3;
# 4
   x -> mul:0;

   %0 const0 -> mul:1;   
   %1 const1 -> mul:1;
   %2 const2 -> mul:1;
   %3 const3 -> mul:1;

   mul -> mul:0;

   mul -> out;
}

module MainRoundAndKey(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf,rcon){
   MainRound round;
   KeySchedule key;
#
   x0 -> round:0;
   x1 -> round:1;
   x2 -> round:2;
   x3 -> round:3;
   x4 -> round:4;
   x5 -> round:5;
   x6 -> round:6;
   x7 -> round:7;
   x8 -> round:8;
   x9 -> round:9;
   xa -> round:10;
   xb -> round:11;
   xc -> round:12;
   xd -> round:13;
   xe -> round:14;
   xf -> round:15;
   k0 -> key:0;
   k1 -> key:1;
   k2 -> key:2;
   k3 -> key:3;
   k4 -> key:4;
   k5 -> key:5;
   k6 -> key:6;
   k7 -> key:7;
   k8 -> key:8;
   k9 -> key:9;
   ka -> key:10;
   kb -> key:11;
   kc -> key:12;
   kd -> key:13;
   ke -> key:14;
   kf -> key:15;
   rcon -> key:16;
   
   key:0..15 -> round:16..31;

   round:0..15 -> out:0..15;
   key:0..15 -> out:16..31;
}

module AES(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf){
   Const rcon0;
   Const rcon1;
   Const rcon2;
   Const rcon3;
   Const rcon4;
   Const rcon5;
   Const rcon6;
   Const rcon7;
   Const rcon8;
   Const rcon9;
   
   MainRoundAndKey mk0;
   MainRoundAndKey mk1;
   MainRoundAndKey mk2;
   MainRoundAndKey mk3;
   MainRoundAndKey mk4;
   MainRoundAndKey mk5;
   MainRoundAndKey mk6;
   MainRoundAndKey mk7;
   MainRoundAndKey mk8;

   KeySchedule key9;

   AddRoundKey firstKey;
   SBox subBytes;
   ShiftRows shiftRows;
   AddRoundKey lastKey;
#
   x0 -> firstKey:0;
   x1 -> firstKey:1;
   x2 -> firstKey:2;
   x3 -> firstKey:3;
   x4 -> firstKey:4;
   x5 -> firstKey:5;
   x6 -> firstKey:6;
   x7 -> firstKey:7;
   x8 -> firstKey:8;
   x9 -> firstKey:9;
   xa -> firstKey:10;
   xb -> firstKey:11;
   xc -> firstKey:12;
   xd -> firstKey:13;
   xe -> firstKey:14;
   xf -> firstKey:15;
   k0 -> firstKey:16;
   k1 -> firstKey:17;
   k2 -> firstKey:18;
   k3 -> firstKey:19;
   k4 -> firstKey:20;
   k5 -> firstKey:21;
   k6 -> firstKey:22;
   k7 -> firstKey:23;
   k8 -> firstKey:24;
   k9 -> firstKey:25;
   ka -> firstKey:26;
   kb -> firstKey:27;
   kc -> firstKey:28;
   kd -> firstKey:29;
   ke -> firstKey:30;
   kf -> firstKey:31;

   firstKey:0..15 -> mk0:0..15;
   k0 -> mk0:16;
   k1 -> mk0:17;
   k2 -> mk0:18;
   k3 -> mk0:19;
   k4 -> mk0:20;
   k5 -> mk0:21;
   k6 -> mk0:22;
   k7 -> mk0:23;
   k8 -> mk0:24;
   k9 -> mk0:25;
   ka -> mk0:26;
   kb -> mk0:27;
   kc -> mk0:28;
   kd -> mk0:29;
   ke -> mk0:30;
   kf -> mk0:31;
   
   rcon0 -> mk0:32;
   mk0:0..15 -> mk1:0..15;
   mk0:16..31 -> mk1:16..31;

   rcon1 -> mk1:32;
   mk1:0..15 -> mk2:0..15;
   mk1:16..31 -> mk2:16..31;

   rcon2 -> mk2:32;
   mk2:0..15 -> mk3:0..15;
   mk2:16..31 -> mk3:16..31;

   rcon3 -> mk3:32;
   mk3:0..15 -> mk4:0..15;
   mk3:16..31 -> mk4:16..31;

   rcon4 -> mk4:32;
   mk4:0..15 -> mk5:0..15;
   mk4:16..31 -> mk5:16..31;

   rcon5 -> mk5:32;
   mk5:0..15 -> mk6:0..15;
   mk5:16..31 -> mk6:16..31;

   rcon6 -> mk6:32;
   mk6:0..15 -> mk7:0..15;
   mk6:16..31 -> mk7:16..31;

   rcon7 -> mk7:32;
   mk7:0..15 -> mk8:0..15;
   mk7:16..31 -> mk8:16..31;

   rcon8 -> mk8:32;
   mk8:16..31 -> key9:0..15;

   rcon9 -> key9:16;
   mk8:0..15 -> subBytes:0..15;
   subBytes:0..15 -> shiftRows:0..15;
   shiftRows:0..15 -> lastKey:0..15;

   key9:0..15 -> lastKey:16..31;

   lastKey:0..15 -> out:0..15;
}

iterative AESPathExample(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf,rcon0,rcon1,rcon2,rcon3,rcon4,rcon5,rcon6,rcon7,rcon8){
   MainRoundAndKey roundAndKey;
# 9
   x0 -> roundAndKey:0;
   x1 -> roundAndKey:1;
   x2 -> roundAndKey:2;
   x3 -> roundAndKey:3;
   x4 -> roundAndKey:4;
   x5 -> roundAndKey:5;
   x6 -> roundAndKey:6;
   x7 -> roundAndKey:7;
   x8 -> roundAndKey:8;
   x9 -> roundAndKey:9;
   xa -> roundAndKey:10;
   xb -> roundAndKey:11;
   xc -> roundAndKey:12;
   xd -> roundAndKey:13;
   xe -> roundAndKey:14;
   xf -> roundAndKey:15;
   k0 -> roundAndKey:16;
   k1 -> roundAndKey:17;
   k2 -> roundAndKey:18;
   k3 -> roundAndKey:19;
   k4 -> roundAndKey:20;
   k5 -> roundAndKey:21;
   k6 -> roundAndKey:22;
   k7 -> roundAndKey:23;
   k8 -> roundAndKey:24;
   k9 -> roundAndKey:25;
   ka -> roundAndKey:26;
   kb -> roundAndKey:27;
   kc -> roundAndKey:28;
   kd -> roundAndKey:29;
   ke -> roundAndKey:30;
   kf -> roundAndKey:31;

   roundAndKey:0..31 -> roundAndKey:0..31;

   %0 rcon0 -> roundAndKey:32;
   %1 rcon1 -> roundAndKey:32;
   %2 rcon2 -> roundAndKey:32;
   %3 rcon3 -> roundAndKey:32;
   %4 rcon4 -> roundAndKey:32;
   %5 rcon5 -> roundAndKey:32;
   %6 rcon6 -> roundAndKey:32;
   %7 rcon7 -> roundAndKey:32;
   %8 rcon8 -> roundAndKey:32;

   roundAndKey:0..31 -> out:0..31;
}

module AESWithIterative(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf){
   Const rcon0;
   Const rcon1;
   Const rcon2;
   Const rcon3;
   Const rcon4;
   Const rcon5;
   Const rcon6;
   Const rcon7;
   Const rcon8;
   Const rcon9;
   
   AESPathExample mk0;

   KeySchedule key9;

   AddRoundKey firstKey;
   SBox subBytes;
   ShiftRows shiftRows;
   AddRoundKey lastKey;
#
   x0 -> firstKey:0;
   x1 -> firstKey:1;
   x2 -> firstKey:2;
   x3 -> firstKey:3;
   x4 -> firstKey:4;
   x5 -> firstKey:5;
   x6 -> firstKey:6;
   x7 -> firstKey:7;
   x8 -> firstKey:8;
   x9 -> firstKey:9;
   xa -> firstKey:10;
   xb -> firstKey:11;
   xc -> firstKey:12;
   xd -> firstKey:13;
   xe -> firstKey:14;
   xf -> firstKey:15;
   k0 -> firstKey:16;
   k1 -> firstKey:17;
   k2 -> firstKey:18;
   k3 -> firstKey:19;
   k4 -> firstKey:20;
   k5 -> firstKey:21;
   k6 -> firstKey:22;
   k7 -> firstKey:23;
   k8 -> firstKey:24;
   k9 -> firstKey:25;
   ka -> firstKey:26;
   kb -> firstKey:27;
   kc -> firstKey:28;
   kd -> firstKey:29;
   ke -> firstKey:30;
   kf -> firstKey:31;

   firstKey:0..15 -> mk0:0..15;
   k0 -> mk0:16;
   k1 -> mk0:17;
   k2 -> mk0:18;
   k3 -> mk0:19;
   k4 -> mk0:20;
   k5 -> mk0:21;
   k6 -> mk0:22;
   k7 -> mk0:23;
   k8 -> mk0:24;
   k9 -> mk0:25;
   ka -> mk0:26;
   kb -> mk0:27;
   kc -> mk0:28;
   kd -> mk0:29;
   ke -> mk0:30;
   kf -> mk0:31;
   rcon0 -> mk0:32;
   rcon1 -> mk0:33;
   rcon2 -> mk0:34;
   rcon3 -> mk0:35;
   rcon4 -> mk0:36;
   rcon5 -> mk0:37;
   rcon6 -> mk0:38;
   rcon7 -> mk0:39;
   rcon8 -> mk0:40;
   
   mk0:0..15 -> subBytes:0..15;
   mk0:16..31 -> key9:0..15;

   rcon9 -> key9:16;
   subBytes:0..15 -> shiftRows:0..15;
   shiftRows:0..15 -> lastKey:0..15;

   key9:0..15 -> lastKey:16..31;

   lastKey:0..15 -> out:0..15;
}

module ReadWriteAES(){
   VRead cypher;
   VRead key;
   VWrite results;
   Merge merge;
   AES aes;
#
   cypher[0..15] -> aes:0..15;
   key[0..15] -> aes:16..31;

   aes:0..15 -> merge:0..15;

   merge -> results;
}

module FirstLineKey(x0,x1,x2,x3,w0,w1,w2,w3,rcon){
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b1;
#
   x1 -> b0:0;
   x2 -> b0:1;
   x3 -> b1:0;
   x0 -> b1:1;

   d0 = b0:0 ^ w0 ^ rcon;
   d1 = b0:1 ^ w1;
   d2 = b1:0 ^ w2;
   d3 = b1:1 ^ w3;

   d0 -> out:0; 
   d1 -> out:1; 
   d2 -> out:2; 
   d3 -> out:3; 
}

module FourthLineKey(x0,x1,x2,x3,w0,w1,w2,w3){
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b0;
   LookupTable #(.ADDR_W(8),.SIZE_W(8)) b1;
#
   x0 -> b0:0;
   x1 -> b0:1;

   x2 -> b1:0;
   x3 -> b1:1;

   d0 = b0:0 ^ w0;
   d1 = b0:1 ^ w1;
   d2 = b1:0 ^ w2;
   d3 = b1:1 ^ w3;

   d0 -> out:0; 
   d1 -> out:1; 
   d2 -> out:2; 
   d3 -> out:3; 
}

module KeySchedule256(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x1a,x1b,x1c,x1d,x1e,x1f,rcon){
   FirstLineKey s;
   FourthLineKey q;
#
   x13 -> s:0;
   x17 -> s:1;
   x1b -> s:2;
   x1f -> s:3;
   x0 -> s:4;
   x4 -> s:5;
   x8 -> s:6;
   xc -> s:7;
   rcon -> s:8;

   a0 = s:0 ^ x1;
   a1 = s:1 ^ x5;
   a2 = s:2 ^ x9;
   a3 = s:3 ^ xd;

   b0 = a0 ^ x2;
   b1 = a1 ^ x6;
   b2 = a2 ^ xa;
   b3 = a3 ^ xe;

   c0 = b0 ^ x3;
   c1 = b1 ^ x7;
   c2 = b2 ^ xb;
   c3 = b3 ^ xf;

   c0 -> q:0;
   c1 -> q:1;
   c2 -> q:2;
   c3 -> q:3;
   x10 -> q:4;
   x14 -> q:5;
   x18 -> q:6;
   x1c -> q:7;

   d0 = q:0 ^ x11;
   d1 = q:1 ^ x15;
   d2 = q:2 ^ x19;
   d3 = q:3 ^ x1d;

   e0 = d0 ^ x12;
   e1 = d1 ^ x16;
   e2 = d2 ^ x1a;
   e3 = d3 ^ x1e;

   f0 = e0 ^ x13;
   f1 = e1 ^ x17;
   f2 = e2 ^ x1b;
   f3 = e3 ^ x1f;

   s:0 -> out:0;
   s:1 -> out:4;
   s:2 -> out:8;
   s:3 -> out:12;
   a0 -> out:1;
   a1 -> out:5;
   a2 -> out:9;
   a3 -> out:13;
   b0 -> out:2;
   b1 -> out:6;
   b2 -> out:10;
   b3 -> out:14;
   c0 -> out:3;
   c1 -> out:7;
   c2 -> out:11;
   c3 -> out:15;
   q:0 -> out:16;
   q:1 -> out:20;
   q:2 -> out:24;
   q:3 -> out:28;
   d0 -> out:17;
   d1 -> out:21;
   d2 -> out:25;
   d3 -> out:29;
   e0 -> out:18;
   e1 -> out:22;
   e2 -> out:26;
   e3 -> out:30;
   f0 -> out:19;
   f1 -> out:23;
   f2 -> out:27;
   f3 -> out:31;
}

module RoundPairAndKey(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf,k10,k11,k12,k13,k14,k15,k16,k17,k18,k19,k1a,k1b,k1c,k1d,k1e,k1f,rcon){
   MainRound round1;
   MainRound round2;
   KeySchedule256 key;
#
   x0 -> round1:0;
   x1 -> round1:1;
   x2 -> round1:2;
   x3 -> round1:3;
   x4 -> round1:4;
   x5 -> round1:5;
   x6 -> round1:6;
   x7 -> round1:7;
   x8 -> round1:8;
   x9 -> round1:9;
   xa -> round1:10;
   xb -> round1:11;
   xc -> round1:12;
   xd -> round1:13;
   xe -> round1:14;
   xf -> round1:15;

   k0 -> key:0;
   k1 -> key:1;
   k2 -> key:2;
   k3 -> key:3;
   k4 -> key:4;
   k5 -> key:5;
   k6 -> key:6;
   k7 -> key:7;
   k8 -> key:8;
   k9 -> key:9;
   ka -> key:10;
   kb -> key:11;
   kc -> key:12;
   kd -> key:13;
   ke -> key:14;
   kf -> key:15;
   k10 -> key:16;
   k11 -> key:17;
   k12 -> key:18;
   k13 -> key:19;
   k14 -> key:20;
   k15 -> key:21;
   k16 -> key:22;
   k17 -> key:23;
   k18 -> key:24;
   k19 -> key:25;
   k1a -> key:26;
   k1b -> key:27;
   k1c -> key:28;
   k1d -> key:29;
   k1e -> key:30;
   k1f -> key:31;
   rcon -> key:32;
   
   key:0..15 -> round1:16..31;

   round1:0..15 -> round2:0..15;
   key:16..31 -> round2:16..31;

   round2:0..15 -> out:0..15;
   key:0..31 -> out:16..47;
}

iterative AES256Path(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf,k10,k11,k12,k13,k14,k15,k16,k17,k18,k19,k1a,k1b,k1c,k1d,k1e,k1f,rcon0,rcon1,rcon2,rcon3,rcon4,rcon5){
   RoundPairAndKey roundPairAndKey;
# 6
   x0 -> roundPairAndKey:0;
   x1 -> roundPairAndKey:1;
   x2 -> roundPairAndKey:2;
   x3 -> roundPairAndKey:3;
   x4 -> roundPairAndKey:4;
   x5 -> roundPairAndKey:5;
   x6 -> roundPairAndKey:6;
   x7 -> roundPairAndKey:7;
   x8 -> roundPairAndKey:8;
   x9 -> roundPairAndKey:9;
   xa -> roundPairAndKey:10;
   xb -> roundPairAndKey:11;
   xc -> roundPairAndKey:12;
   xd -> roundPairAndKey:13;
   xe -> roundPairAndKey:14;
   xf -> roundPairAndKey:15;
   k0 -> roundPairAndKey:16;
   k1 -> roundPairAndKey:17;
   k2 -> roundPairAndKey:18;
   k3 -> roundPairAndKey:19;
   k4 -> roundPairAndKey:20;
   k5 -> roundPairAndKey:21;
   k6 -> roundPairAndKey:22;
   k7 -> roundPairAndKey:23;
   k8 -> roundPairAndKey:24;
   k9 -> roundPairAndKey:25;
   ka -> roundPairAndKey:26;
   kb -> roundPairAndKey:27;
   kc -> roundPairAndKey:28;
   kd -> roundPairAndKey:29;
   ke -> roundPairAndKey:30;
   kf -> roundPairAndKey:31;
   k10 -> roundPairAndKey:32;
   k11 -> roundPairAndKey:33;
   k12 -> roundPairAndKey:34;
   k13 -> roundPairAndKey:35;
   k14 -> roundPairAndKey:36;
   k15 -> roundPairAndKey:37;
   k16 -> roundPairAndKey:38;
   k17 -> roundPairAndKey:39;
   k18 -> roundPairAndKey:40;
   k19 -> roundPairAndKey:41;
   k1a -> roundPairAndKey:42;
   k1b -> roundPairAndKey:43;
   k1c -> roundPairAndKey:44;
   k1d -> roundPairAndKey:45;
   k1e -> roundPairAndKey:46;
   k1f -> roundPairAndKey:47;

   roundPairAndKey:0..47 -> roundPairAndKey:0..47;

   %0 rcon0 -> roundPairAndKey:48;
   %1 rcon1 -> roundPairAndKey:48;
   %2 rcon2 -> roundPairAndKey:48;
   %3 rcon3 -> roundPairAndKey:48;
   %4 rcon4 -> roundPairAndKey:48;
   %5 rcon5 -> roundPairAndKey:48;

   roundPairAndKey:0..47 -> out:0..47;
}

module AES256WithIterative(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,xa,xb,xc,xd,xe,xf,k0,k1,k2,k3,k4,k5,k6,k7,k8,k9,ka,kb,kc,kd,ke,kf,k10,k11,k12,k13,k14,k15,k16,k17,k18,k19,k1a,k1b,k1c,k1d,k1e,k1f){
   Const rcon0;
   Const rcon1;
   Const rcon2;
   Const rcon3;
   Const rcon4;
   Const rcon5;
   Const rcon6;
   
   AES256Path mk0;

   KeySchedule256 key6;

   AddRoundKey firstKey;
   MainRound round0;
   SBox subBytes;
   ShiftRows shiftRows;
   AddRoundKey lastKey;
#
   x0 -> firstKey:0;
   x1 -> firstKey:4;
   x2 -> firstKey:8;
   x3 -> firstKey:12;
   x4 -> firstKey:1;
   x5 -> firstKey:5;
   x6 -> firstKey:9;
   x7 -> firstKey:13;
   x8 -> firstKey:2;
   x9 -> firstKey:6;
   xa -> firstKey:10;
   xb -> firstKey:14;
   xc -> firstKey:3;
   xd -> firstKey:7;
   xe -> firstKey:11;
   xf -> firstKey:15;
   k0 -> firstKey:16;
   k1 -> firstKey:20;
   k2 -> firstKey:24;
   k3 -> firstKey:28;
   k4 -> firstKey:17;
   k5 -> firstKey:21;
   k6 -> firstKey:25;
   k7 -> firstKey:29;
   k8 -> firstKey:18;
   k9 -> firstKey:22;
   ka -> firstKey:26;
   kb -> firstKey:30;
   kc -> firstKey:19;
   kd -> firstKey:23;
   ke -> firstKey:27;
   kf -> firstKey:31;

   firstKey:0..15 -> round0:0..15;
   k10 -> round0:16;
   k11 -> round0:20;
   k12 -> round0:24;
   k13 -> round0:28;
   k14 -> round0:17;
   k15 -> round0:21;
   k16 -> round0:25;
   k17 -> round0:29;
   k18 -> round0:18;
   k19 -> round0:22;
   k1a -> round0:26;
   k1b -> round0:30;
   k1c -> round0:19;
   k1d -> round0:23;
   k1e -> round0:27;
   k1f -> round0:31;

   round0:0..15 -> mk0:0..15;
   k0 -> mk0:16;
   k1 -> mk0:20;
   k2 -> mk0:24;
   k3 -> mk0:28;
   k4 -> mk0:17;
   k5 -> mk0:21;
   k6 -> mk0:25;
   k7 -> mk0:29;
   k8 -> mk0:18;
   k9 -> mk0:22;
   ka -> mk0:26;
   kb -> mk0:30;
   kc -> mk0:19;
   kd -> mk0:23;
   ke -> mk0:27;
   kf -> mk0:31;
   k10 -> mk0:32;
   k11 -> mk0:36;
   k12 -> mk0:40;
   k13 -> mk0:44;
   k14 -> mk0:33;
   k15 -> mk0:37;
   k16 -> mk0:41;
   k17 -> mk0:45;
   k18 -> mk0:34;
   k19 -> mk0:38;
   k1a -> mk0:42;
   k1b -> mk0:46;
   k1c -> mk0:35;
   k1d -> mk0:39;
   k1e -> mk0:43;
   k1f -> mk0:47;
   rcon0 -> mk0:48;
   rcon1 -> mk0:49;
   rcon2 -> mk0:50;
   rcon3 -> mk0:51;
   rcon4 -> mk0:52;
   rcon5 -> mk0:53;
   
   mk0:16..47 -> key6:0..31;
   rcon6 -> key6:32;

   mk0:0..15 -> subBytes:0..15;
   subBytes:0..15 -> shiftRows:0..15;

   shiftRows:0..15 -> lastKey:0..15;
   key6:0..15 -> lastKey:16..31;

   lastKey:0 -> out:0;
   lastKey:1 -> out:4;
   lastKey:2 -> out:8;
   lastKey:3 -> out:12;
   lastKey:4 -> out:1;
   lastKey:5 -> out:5;
   lastKey:6 -> out:9;
   lastKey:7 -> out:13;
   lastKey:8 -> out:2;
   lastKey:9 -> out:6;
   lastKey:10 -> out:10;
   lastKey:11 -> out:14;
   lastKey:12 -> out:3;
   lastKey:13 -> out:7;
   lastKey:14 -> out:11;
   lastKey:15 -> out:15;
}

module VectorLikeOperation(){
   ReadWriteMem mat;
   VRead row;
   VWrite writer;
   Const mask;
#
   a = row & mask;
   b = mat ^ a;

   c = mat & mask;
   d = row ^ c;

   b -> mat;
   d -> writer;
}

module ReadWriteAES256(){
   VRead cypher;
   VRead key;
   VWrite results;
   Merge merge;
   // Simple aes;
   AES256WithIterative aes;
#
   
   cypher[0..15] -> aes:0..15;
   key[0..31] -> aes:16..47;

   aes:0..15 -> merge:0..15;

   merge -> results;
}

merge SHA_AES = SHA | ReadWriteAES256 | VectorLikeOperation;

