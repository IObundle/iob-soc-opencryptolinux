/* This file was automatically generated by:
 * `write_linux_sysfs_header` method of `mkregs.py`
 */

#ifndef H_IOB_DMA_SYSFS_H
#define H_IOB_DMA_SYSFS_H

// Sysfs show/store functions
static ssize_t sysfs_enosys_show(struct device *dev, struct device_attribute *attr, char *buf) {
	return -ENOSYS;
}

static ssize_t sysfs_enosys_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	return -ENOSYS;
}

static ssize_t sysfs_base_addr_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_dma_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_dma_data->regbase, value, IOB_DMA_BASE_ADDR_ADDR, IOB_DMA_BASE_ADDR_W);
	mutex_unlock(&iob_dma_mutex);
	pr_info("[iob_dma] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_transfer_size_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_dma_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_dma_data->regbase, value, IOB_DMA_TRANSFER_SIZE_ADDR, IOB_DMA_TRANSFER_SIZE_W);
	mutex_unlock(&iob_dma_mutex);
	pr_info("[iob_dma] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_direction_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_dma_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_dma_data->regbase, value, IOB_DMA_DIRECTION_ADDR, IOB_DMA_DIRECTION_W);
	mutex_unlock(&iob_dma_mutex);
	pr_info("[iob_dma] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_interface_num_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_dma_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_dma_data->regbase, value, IOB_DMA_INTERFACE_NUM_ADDR, IOB_DMA_INTERFACE_NUM_W);
	mutex_unlock(&iob_dma_mutex);
	pr_info("[iob_dma] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_ready_r_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_dma_data->regbase, IOB_DMA_READY_R_ADDR, IOB_DMA_READY_R_W);
	pr_info("[iob_dma] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_ready_w_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_dma_data->regbase, IOB_DMA_READY_W_ADDR, IOB_DMA_READY_W_W);
	pr_info("[iob_dma] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_version_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_dma_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_dma_data->regbase, IOB_DMA_VERSION_ADDR, IOB_DMA_VERSION_W);
	pr_info("[iob_dma] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

// Device attributes
DEVICE_ATTR(base_addr, 0600, sysfs_enosys_show, sysfs_base_addr_store);
DEVICE_ATTR(transfer_size, 0600, sysfs_enosys_show, sysfs_transfer_size_store);
DEVICE_ATTR(direction, 0600, sysfs_enosys_show, sysfs_direction_store);
DEVICE_ATTR(interface_num, 0600, sysfs_enosys_show, sysfs_interface_num_store);
DEVICE_ATTR(ready_r, 0600, sysfs_ready_r_show, sysfs_enosys_store);
DEVICE_ATTR(ready_w, 0600, sysfs_ready_w_show, sysfs_enosys_store);
DEVICE_ATTR(version, 0600, sysfs_version_show, sysfs_enosys_store);

// Probe / Remove functions
static int iob_dma_create_device_attr_files(struct device *device) {
	int ret = 0;
	ret |= device_create_file(device, &dev_attr_base_addr);
	ret |= device_create_file(device, &dev_attr_transfer_size);
	ret |= device_create_file(device, &dev_attr_direction);
	ret |= device_create_file(device, &dev_attr_interface_num);
	ret |= device_create_file(device, &dev_attr_ready_r);
	ret |= device_create_file(device, &dev_attr_ready_w);
	ret |= device_create_file(device, &dev_attr_version);
	return ret;
}

static void iob_dma_remove_device_attr_files(struct iob_data *iob_dma_data) {
	device_remove_file(iob_dma_data->device, &dev_attr_base_addr);
	device_remove_file(iob_dma_data->device, &dev_attr_transfer_size);
	device_remove_file(iob_dma_data->device, &dev_attr_direction);
	device_remove_file(iob_dma_data->device, &dev_attr_interface_num);
	device_remove_file(iob_dma_data->device, &dev_attr_ready_r);
	device_remove_file(iob_dma_data->device, &dev_attr_ready_w);
	device_remove_file(iob_dma_data->device, &dev_attr_version);
	device_destroy(iob_dma_data->class, iob_dma_data->devnum);
	return;
}

#endif // H_IOB_DMA_SYSFS_H
