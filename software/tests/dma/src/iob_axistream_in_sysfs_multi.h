/* This file was automatically generated by:
 * `write_linux_sysfs_header` method of `mkregs.py`
 */

#ifndef H_IOB_AXISTREAM_IN_SYSFS_H
#define H_IOB_AXISTREAM_IN_SYSFS_H

// Sysfs show/store functions
static ssize_t sysfs_enosys_show(struct device *dev, struct device_attribute *attr, char *buf) {
	return -ENOSYS;
}

static ssize_t sysfs_enosys_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	return -ENOSYS;
}

static ssize_t sysfs_soft_reset_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_axistream_in_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_axistream_in_data->regbase, value, IOB_AXISTREAM_IN_SOFT_RESET_ADDR, IOB_AXISTREAM_IN_SOFT_RESET_W);
	mutex_unlock(&iob_axistream_in_mutex);
	pr_info("[iob_axistream_in] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_enable_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_axistream_in_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_axistream_in_data->regbase, value, IOB_AXISTREAM_IN_ENABLE_ADDR, IOB_AXISTREAM_IN_ENABLE_W);
	mutex_unlock(&iob_axistream_in_mutex);
	pr_info("[iob_axistream_in] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_data_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_DATA_ADDR, IOB_AXISTREAM_IN_DATA_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_mode_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_axistream_in_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_axistream_in_data->regbase, value, IOB_AXISTREAM_IN_MODE_ADDR, IOB_AXISTREAM_IN_MODE_W);
	mutex_unlock(&iob_axistream_in_mutex);
	pr_info("[iob_axistream_in] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_nwords_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_NWORDS_ADDR, IOB_AXISTREAM_IN_NWORDS_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_tlast_detected_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_TLAST_DETECTED_ADDR, IOB_AXISTREAM_IN_TLAST_DETECTED_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_fifo_full_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_FIFO_FULL_ADDR, IOB_AXISTREAM_IN_FIFO_FULL_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_fifo_empty_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_FIFO_EMPTY_ADDR, IOB_AXISTREAM_IN_FIFO_EMPTY_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_fifo_threshold_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	u32 value = 0;
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	if (!mutex_trylock(&iob_axistream_in_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(iob_axistream_in_data->regbase, value, IOB_AXISTREAM_IN_FIFO_THRESHOLD_ADDR, IOB_AXISTREAM_IN_FIFO_THRESHOLD_W);
	mutex_unlock(&iob_axistream_in_mutex);
	pr_info("[iob_axistream_in] Sysfs - Write: 0x%x\n", value);
	return count;
}

static ssize_t sysfs_fifo_level_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_FIFO_LEVEL_ADDR, IOB_AXISTREAM_IN_FIFO_LEVEL_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_version_show(struct device *dev, struct device_attribute *attr, char *buf) {
	struct iob_data *iob_axistream_in_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(iob_axistream_in_data->regbase, IOB_AXISTREAM_IN_VERSION_ADDR, IOB_AXISTREAM_IN_VERSION_W);
	pr_info("[iob_axistream_in] Sysfs - Read: 0x%x\n", value);
	return sprintf(buf, "%u", value);
}

// Device attributes
DEVICE_ATTR(soft_reset, 0600, sysfs_enosys_show, sysfs_soft_reset_store);
DEVICE_ATTR(enable, 0600, sysfs_enosys_show, sysfs_enable_store);
DEVICE_ATTR(data, 0600, sysfs_data_show, sysfs_enosys_store);
DEVICE_ATTR(mode, 0600, sysfs_enosys_show, sysfs_mode_store);
DEVICE_ATTR(nwords, 0600, sysfs_nwords_show, sysfs_enosys_store);
DEVICE_ATTR(tlast_detected, 0600, sysfs_tlast_detected_show, sysfs_enosys_store);
DEVICE_ATTR(fifo_full, 0600, sysfs_fifo_full_show, sysfs_enosys_store);
DEVICE_ATTR(fifo_empty, 0600, sysfs_fifo_empty_show, sysfs_enosys_store);
DEVICE_ATTR(fifo_threshold, 0600, sysfs_enosys_show, sysfs_fifo_threshold_store);
DEVICE_ATTR(fifo_level, 0600, sysfs_fifo_level_show, sysfs_enosys_store);
DEVICE_ATTR(version, 0600, sysfs_version_show, sysfs_enosys_store);

// Probe / Remove functions
static int iob_axistream_in_create_device_attr_files(struct device *device) {
	int ret = 0;
	ret |= device_create_file(device, &dev_attr_soft_reset);
	ret |= device_create_file(device, &dev_attr_enable);
	ret |= device_create_file(device, &dev_attr_data);
	ret |= device_create_file(device, &dev_attr_mode);
	ret |= device_create_file(device, &dev_attr_nwords);
	ret |= device_create_file(device, &dev_attr_tlast_detected);
	ret |= device_create_file(device, &dev_attr_fifo_full);
	ret |= device_create_file(device, &dev_attr_fifo_empty);
	ret |= device_create_file(device, &dev_attr_fifo_threshold);
	ret |= device_create_file(device, &dev_attr_fifo_level);
	ret |= device_create_file(device, &dev_attr_version);
	return ret;
}

static void iob_axistream_in_remove_device_attr_files(struct iob_data *iob_axistream_in_data) {
	device_remove_file(iob_axistream_in_data->device, &dev_attr_soft_reset);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_enable);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_data);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_mode);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_nwords);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_tlast_detected);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_fifo_full);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_fifo_empty);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_fifo_threshold);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_fifo_level);
	device_remove_file(iob_axistream_in_data->device, &dev_attr_version);
	device_destroy(iob_axistream_in_data->class, iob_axistream_in_data->devnum);
	return;
}

#endif // H_IOB_AXISTREAM_IN_SYSFS_H
